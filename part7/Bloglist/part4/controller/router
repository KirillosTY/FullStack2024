const mailRouter = require('express').Router()
const Comment = require('.././models/CommentSchema')
const Blog = require('.././models/blogSchema')
const { response } = require('../app')
const users = require('.././models/userSchema')
const jwt = require('jsonwebtoken')





mailRouter.get('', async (request, response) => {

  const user = request.user  

  response.json(await Blog.find({}).populate('user',{username:1, name:1}).populate('comments',{comments:1,id:1}))
})

mailRouter.post('', async(request, response) => {
  const user = request.user
  if(!user){
    return response.status(401).json({ error: 'token invalid' })
  }
  const usersFoundFirst = await users.findById(user.id)
  const blog= request.body 
  blog.user = usersFoundFirst.id
  
 if(blog.title === undefined || blog.url === undefined){
    response.status(400).end()
  } else {

    if(blog.likes === undefined){
   
      blog.likes = 0
    }
    const newBlog = new Blog(blog)
    
  const savedBlog = await newBlog.save()


  usersFoundFirst.blogs = usersFoundFirst.blogs.concat(savedBlog.id)
  await usersFoundFirst.save()
  response.status(201).json(newBlog)
  }

})


mailRouter.get('/:id', async(request, response) => {
     response.json(await Blog.findById(request.params.id))
   
  
  })


mailRouter.post('/:id', async(request, response) => {
  
    const foundBlog = await Blog.findById(request.params.id)
    .populate('user',{username:1,name:1 })
    .populate('comments',{blogid:1, comments:1})
    const comment= request.body 
    comment.blog = foundBlog

    const newComment = new Comment(comment)
   
          
    const savedcomment = await newComment.save()
  
    
    foundBlog.comments = foundBlog.comments.concat(savedcomment.id)

    await foundBlog.save()
      
    response.status(201).json(savedcomment)
    }
  
  )

mailRouter.delete('/:id', async (request, response)=> {
  const user = request.user

  const blogOwnerID = (await Blog.findById(request.params.id)).user.toString()
  
  
  if(blogOwnerID === user.id){
     await Blog.findByIdAndDelete(request.params.id)

    response.status(204).end()
  } else {
    response.status(401).send({error: "Permission denied"})
  }

})


mailRouter.put('/:id', async (request, response) => {
  const updatedBlog = request.body;

  const user = request.user  

  const updatedDBBlog = await Blog.findByIdAndUpdate(request.params.id, updatedBlog, {new:true})
  .populate('user',{username:1,name:1 })
  .populate('comments',{id:1, comments:1})
  
  response.json(updatedDBBlog)
})



module.exports = mailRouter